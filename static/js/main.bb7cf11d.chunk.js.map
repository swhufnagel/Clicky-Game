{"version":3,"sources":["logo.png","components/Wrapper/index.js","components/FriendCard/index.js","components/Title/index.js","components/GameContainer/index.js","components/Navbar/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Wrapper","props","react_default","a","createElement","className","children","FriendCard","onClick","registerClick","id","onMouseOver","registerHover","Card_default","style","width","height","Img","alt","name","variant","src","image","Title","GameContainer","Navbar","href","answer","class","score","highScore","shuffle","require","clickedArray","App","state","friends","clicked","lost","checkforHighScore","console","log","_this","setState","checkforDupes","includes","filter","friend","push","this","_this2","components_Navbar","logo","components_Wrapper","components_Title","components_GameContainer","map","components_FriendCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bb7cf11d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5e061bc2.png\";","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n    return <div className=\"container wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\nimport Card from 'react-bootstrap/Card';\n\nfunction FriendCard(props) {\n    return (\n        <div onClick={() => props.registerClick(props.id)} className=\"character-container\"\n            onMouseOver={() => props.registerHover(props.id)}>\n            <Card className=\"card\" style={{ width: '150px', height: '150px' }}>\n                <Card.Img className=\"charImage\" alt={props.name} variant=\"top\" src={props.image} />\n            </Card>\n        </div>\n    )\n}\n\nexport default FriendCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h3 className=\"title\">{props.children}</h3>;\n}\n\nexport default Title;\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction GameContainer(props) {\n    return <div className=\"gameContainer\">{props.children}</div>;\n}\n\nexport default GameContainer;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar navbar-dark fixed-top bg-dark\">\n            <brand className=\"navbar-brand\" href=\"/\">X-men Memory Game</brand>\n            <p className=\"answer\">{props.answer}</p>\n            <div class=\"scoreContainer\">\n                <div id=\"score\" className=\"nav-item white\"> Score: {props.score}</div>\n                <p id=\"highScore\" className=\"nav-item white \"> High Score: {props.highScore}</p>\n            </div>\n        </nav>\n    )\n}\n\nexport default Navbar;\n\n","import React, { Component } from 'react';\nimport Wrapper from \"./components/Wrapper\";\nimport FriendCard from \"./components/FriendCard\";\nimport Title from \"./components/Title\"\nimport logo from './logo.png';\nimport friends from \"./characters.json\"\nimport './App.css';\nimport GameContainer from \"./components/GameContainer\"\nimport Navbar from \"./components/Navbar\"\n\nlet shuffle = require('shuffle-array')\nlet clickedArray = [];\n\nclass App extends Component {\n  state = {\n    friends: friends,\n    clicked: [],\n    lost: false,\n    score: 0,\n    highScore: 0,\n    answer: \"\"\n  }\n  componentDidUpdate() {\n    shuffle(this.state.friends);\n  }\n  checkforHighScore = () => {\n    console.log(\"checking high score\");\n    if (this.state.score > this.state.highScore) {\n      this.setState({ highScore: this.state.score })\n    }\n  }\n  checkforDupes = id => {\n    console.log(\"clicked list: \", this.state.clicked);\n    if (this.state.clicked.includes(id)) {\n      this.setState({ lost: true })\n      this.setState({ score: 0 })\n      this.setState({ answer: \"Darn! You Lost :(\" })\n      this.setState({ clicked: [] })\n      clickedArray = [];\n      console.log(\"duplicate clicked : game over : restarting\");\n    }\n    else {\n      this.setState({ score: this.state.score + 1 })\n      this.checkforHighScore();\n      this.setState({ answer: \"Nice! Guess again :)\" })\n      //need to do the shuffling function here\n      const clicked = this.state.friends.filter(friend => friend.id === id);\n      clickedArray.push(clicked[0].id);\n      console.log(\"clicked: \", clicked);\n      this.setState({ clicked: clickedArray });\n    }\n  }\n  registerClick = id => {\n    console.log(\"id: \", id);\n    this.checkforDupes(id);\n  }\n  registerHover = id => {\n    console.log(\"hover: \", id);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          highScore={this.state.highScore}\n          score={this.state.score}\n          answer={this.state.answer}\n        />\n        <header className=\"App-header\">\n          <div id=\"title\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1 id=\"App-title\">\n              X-men Memory Game\n        </h1>\n          </div>\n        </header>\n        <div id=\"gameArea\">\n          <Wrapper>\n            <Title>Click a Character!</Title>\n            <GameContainer\n            >\n              {this.state.friends.map(friend => (\n                <FriendCard\n                  id={friend.id}\n                  key={friend.id}\n                  name={friend.name}\n                  registerClick={this.registerClick}\n                  registerHover={this.registerHover}\n                  image={friend.image} />\n              ))}\n            </GameContainer>\n          </Wrapper>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}